---
title: "regex_hw2"
format: pdf
editor: visual
author: "Emre Batarlar"
---

# Regex Homework 2

Hi everyone! I am Emre. I will talk about key functions that can detect the presence or absence of a match and count the number of matches.

as always I am using tidyverse package for my functions and babynames package for some examples

```{r warning=FALSE}
 library(tidyverse)
library(babynames)
library(ggplot2)


```

Meet **`str_detect()`**, a function spotting patterns in data.

```{r}
str_detect(c("a", "b", "c"), "[aeiou]")


```

Since [`str_detect()`](https://stringr.tidyverse.org/reference/str_detect.html) returns a logical vector of the same length as the initial vector, it pairs well with [`filter()`](https://dplyr.tidyverse.org/reference/filter.html). For example, this code finds all the most popular names containing a lower-case "x":

```{r}
babynames |> 
  filter(str_detect(name, "x")) |> 
  count(name,wt=n, sort = TRUE)



```

We can also use [`str_detect()`](https://stringr.tidyverse.org/reference/str_detect.html) with [`summarize()`](https://dplyr.tidyverse.org/reference/summarise.html) by pairing it with [`sum()`](https://rdrr.io/r/base/sum.html) or [`mean()`](https://rdrr.io/r/base/mean.html): `sum(str_detect(x, pattern))` tells you the number of observations that match and `mean(str_detect(x, pattern))` tells you the proportion that match. For example, the following snippet computes and visualizes the proportion of baby names^[4](https://r4ds.hadley.nz/regexps#fn4)^ that contain "x", broken down by year. It looks like they've radically increased in popularity lately!

```{r}
babynames |> 
  group_by(year) |> 
  summarize(prop_x = mean(str_detect(name, "x"))) |> 
  ggplot(aes(x = year, y = prop_x)) + 
  geom_line()

```

Now, **`str_count()`** steps in, counting occurrences

```{r}
x <- c("apple", "banana", "pear")
str_count(x, "p")




```

Note that each match starts at the end of the previous match, i.e. regex matches never overlap. For example, in `"abababa"`, how many times will the pattern `"aba"` match? Regular expressions say two, not three:

```{r}
str_count("abababa", "aba")

str_view("abababa", "aba")



```

It's natural to use [`str_count()`](https://stringr.tidyverse.org/reference/str_count.html) with [`mutate()`](https://dplyr.tidyverse.org/reference/mutate.html). The following example uses [`str_count()`](https://stringr.tidyverse.org/reference/str_count.html)with character classes to count the number of vowels and consonants in each name.

```{r}
babynames |> 
  count(name) |> 
  mutate(
    vowels = str_count(name, "[aeiou]"),
    consonants = str_count(name, "[^aeiou]")
  )


```

If you look closely, you'll notice that there's something off with our calculations: "Aaban" contains three "a"s, but our summary reports only two vowels. That's because regular expressions are case sensitive. There are three ways we could fix this:

-   Add the upper case vowels to the character class: `str_count(name, "[aeiouAEIOU]")`.

-   Tell the regular expression to ignore case: `str_count(name, regex("[aeiou]", ignore_case = TRUE))`. We'll talk about more in [Section 15.5.1](https://r4ds.hadley.nz/regexps#sec-flags).

-   Use [`str_to_lower()`](https://stringr.tidyverse.org/reference/case.html) to convert the names to lower case: `str_count(str_to_lower(name), "[aeiou]")`.

```{r}
babynames |> 
  count(name) |> 
  mutate(
    name = str_to_lower(name),
    vowels = str_count(name, "[aeiou]"),
    consonants = str_count(name, "[^aeiou]")
  )

```

# BONUS Example

```{}
```

```{r}
# Sample dataset
customer_feedback <- tibble(
  comment = c("Great service! Very satisfied.", 
              "Not happy with the product.", 
              "Amazing experience. Will buy again.", 
              "Disappointed with the delivery time.")
)

# Categorize comments as positive or negative using str_detect()
customer_feedback <- customer_feedback |> 
  mutate(sentiment = ifelse(str_detect(comment, "great|amazing|satisfied"), "positive", "negative"))

# Count the occurrences of positive and negative sentiments using str_count()
sentiment_counts <- customer_feedback |> 
  group_by(sentiment) |> 
  summarise(comment_count = n())

# Visualize the sentiment distribution using ggplot2
sentiment_distribution <- ggplot(sentiment_counts, aes(x = sentiment, y = comment_count, fill = sentiment)) +
  geom_bar(stat = "identity") +
  labs(title = "Sentiment Distribution in Customer Feedback",
       x = "Sentiment",
       y = "Number of Comments")

# Display the results and visualization
sentiment_counts
sentiment_distribution

```

```         
```
